{"ast":null,"code":"var _jsxFileName = \"/Users/mac/Desktop/react_test2/src/pages/Home/index.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect, useRef } from \"react\";\nimport { API_GET_DATA } from '../../global/constants';\nimport Edit from \"./components/Edit\";\nimport List from \"./components/List\";\nimport \"./index.css\";\nimport { saveAs } from \"file-saver\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction downloadJson(modifiedData, filename) {\n  const jsonStr = modifiedData.map(obj => JSON.stringify(obj, null, 2)).join('\\n');\n  const blob = new Blob([jsonStr], {\n    type: \"application/json\"\n  });\n  saveAs(blob, filename);\n  URL.revokeObjectURL(link.href);\n}\nasync function uploadJsonToPinata(modifiedData, filename) {\n  const apiKey = 'fa4a08d7ea6c2452094c';\n  const apiSecret = '6831ea23a4170dfc1f6d422496c244c7e67e8d1965e214ef3987c5438fc064eb';\n  const url = 'https://api.pinata.cloud/pinning/pinJSONToIPFS';\n  const response = await fetch(url, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      pinata_api_key: apiKey,\n      pinata_secret_api_key: apiSecret\n    },\n    body: JSON.stringify({\n      pinataMetadata: {\n        name: filename // 设置文件名\n      },\n\n      pinataContent: modifiedData\n    })\n  });\n  const result = await response.json();\n  return result;\n}\nasync function fetchData(setData) {\n  const res = await fetch(API_GET_DATA);\n  const {\n    data\n  } = await res.json();\n  setData(data);\n}\nasync function fetchSetData(data) {\n  await fetch(API_GET_DATA, {\n    method: \"PUT\",\n    headers: {\n      'Content-type': 'application/json'\n    },\n    body: JSON.stringify({\n      data\n    })\n  });\n}\nconst Home = () => {\n  _s();\n  const [data, setData] = useState([]);\n  const submittingStatus = useRef(false);\n  useEffect(() => {\n    if (!submittingStatus.current) {\n      return;\n    }\n    fetchSetData(data).then(data => submittingStatus.current = false);\n  }, [data]);\n  useEffect(() => {\n    fetchData(setData);\n  }, []);\n  useEffect(() => {\n    if (data.length > 0) {\n      const modifiedData = data.map(item => ({\n        name: item.name,\n        description: item.description,\n        image: item.image,\n        attributes: [{\n          trait_type: \"number\",\n          value: item.number\n        }, {\n          trait_type: \"department\",\n          value: item.dep\n        }, {\n          trait_type: \"school\",\n          value: \"國立台灣師範大學\"\n        }, {\n          trait_type: \"address\",\n          value: item.address\n        }]\n      }));\n\n      // 保存修改后的文件\n      downloadJson(modifiedData, \"data.json\");\n\n      // 获取学号作为文件名\n      const number = data[0].number; // 假设学号在数据的第一个对象中\n      const filename = `${number}.json`; // 使用学号作为文件名，例如：学号.json\n\n      uploadJsonToPinata(modifiedData, filename).then(result => {\n        console.log('File uploaded to Pinata:', result);\n        // 处理上传成功后的操作\n      }).catch(error => {\n        console.error('Error uploading file to Pinata:', error);\n        // 处理上传失败后的操作\n      });\n    }\n  }, [data]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(Edit, {\n      add: setData,\n      submittingStatus: submittingStatus\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(List, {\n      listData: data,\n      deleteData: setData,\n      submittingStatus: submittingStatus\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 5\n  }, this);\n};\n_s(Home, \"AZQ0ukrd8DJug6QUQ1FW1/SNuNk=\");\n_c = Home;\nexport default Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["useState","useEffect","useRef","API_GET_DATA","Edit","List","saveAs","jsxDEV","_jsxDEV","downloadJson","modifiedData","filename","jsonStr","map","obj","JSON","stringify","join","blob","Blob","type","URL","revokeObjectURL","link","href","uploadJsonToPinata","apiKey","apiSecret","url","response","fetch","method","headers","pinata_api_key","pinata_secret_api_key","body","pinataMetadata","name","pinataContent","result","json","fetchData","setData","res","data","fetchSetData","Home","_s","submittingStatus","current","then","length","item","description","image","attributes","trait_type","value","number","dep","address","console","log","catch","error","className","children","add","fileName","_jsxFileName","lineNumber","columnNumber","listData","deleteData","_c","$RefreshReg$"],"sources":["/Users/mac/Desktop/react_test2/src/pages/Home/index.js"],"sourcesContent":["\nimport { useState, useEffect, useRef } from \"react\";\nimport { API_GET_DATA } from '../../global/constants'\nimport Edit from \"./components/Edit\";\nimport List from \"./components/List\";\nimport \"./index.css\";\nimport { saveAs } from \"file-saver\";\n\n\nfunction downloadJson(modifiedData, filename) {\n    const jsonStr = modifiedData.map(obj => JSON.stringify(obj, null, 2)).join('\\n');\n    const blob = new Blob([jsonStr], { type: \"application/json\" });\n  \n    saveAs(blob, filename);\n  \n    URL.revokeObjectURL(link.href);\n  }\n\n  \n\nasync function uploadJsonToPinata(modifiedData, filename) {\n    const apiKey = 'fa4a08d7ea6c2452094c';\n    const apiSecret = '6831ea23a4170dfc1f6d422496c244c7e67e8d1965e214ef3987c5438fc064eb';\n  \n    const url = 'https://api.pinata.cloud/pinning/pinJSONToIPFS';\n  \n    const response = await fetch(url, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          pinata_api_key: apiKey,\n          pinata_secret_api_key: apiSecret,\n        },\n        body: JSON.stringify({\n          pinataMetadata: {\n            name: filename, // 设置文件名\n          },\n          pinataContent: modifiedData,\n        }),\n      });\n    \n      const result = await response.json();\n      return result;\n    }\n\n\n\nasync function fetchData(setData) {\n  const res = await fetch(API_GET_DATA)\n  const { data } = await res.json()\n  setData(data)\n}\n\nasync function fetchSetData(data) {\n  await fetch(API_GET_DATA, {\n    method: \"PUT\",\n    headers: {\n      'Content-type': 'application/json'\n    },\n    body: JSON.stringify({ data })\n  })\n}\n\nconst Home = () => {\n  const [data, setData] = useState([]);\n  const submittingStatus = useRef(false);\n\n  useEffect(() => {\n    if (!submittingStatus.current) {\n      return\n    }\n    fetchSetData(data)\n      .then(data => submittingStatus.current = false)\n  }, [data])\n\n  useEffect(() => {\n    fetchData(setData)\n  }, [])\n\n\n  useEffect(() => {\n    if (data.length > 0) {\n        const modifiedData = data.map(item => ({\n            name: item.name,\n            description: item.description,\n            image: item.image,\n            attributes: [\n              { trait_type: \"number\", value: item.number },\n              { trait_type: \"department\", value: item.dep },\n              { trait_type: \"school\", value: \"國立台灣師範大學\" },\n              { trait_type: \"address\", value: item.address }\n            ]\n          }));\n    \n          // 保存修改后的文件\n      downloadJson(modifiedData, \"data.json\");\n    \n      \n      // 获取学号作为文件名\n      const number = data[0].number; // 假设学号在数据的第一个对象中\n      const filename = `${number}.json`; // 使用学号作为文件名，例如：学号.json\n  \n      uploadJsonToPinata(modifiedData, filename)\n        .then(result => {\n          console.log('File uploaded to Pinata:', result);\n          // 处理上传成功后的操作\n        })\n        .catch(error => {\n          console.error('Error uploading file to Pinata:', error);\n          // 处理上传失败后的操作\n        });\n    }\n  }, [data]);\n  \n\n  return (\n    <div className=\"app\">\n      <Edit add={setData} submittingStatus={submittingStatus} />\n      <List listData={data} deleteData={setData} submittingStatus={submittingStatus} />\n    </div>\n  );\n};\n\nexport default Home;\n"],"mappings":";;AACA,SAASA,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AACnD,SAASC,YAAY,QAAQ,wBAAwB;AACrD,OAAOC,IAAI,MAAM,mBAAmB;AACpC,OAAOC,IAAI,MAAM,mBAAmB;AACpC,OAAO,aAAa;AACpB,SAASC,MAAM,QAAQ,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAGpC,SAASC,YAAYA,CAACC,YAAY,EAAEC,QAAQ,EAAE;EAC1C,MAAMC,OAAO,GAAGF,YAAY,CAACG,GAAG,CAACC,GAAG,IAAIC,IAAI,CAACC,SAAS,CAACF,GAAG,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,CAACG,IAAI,CAAC,IAAI,CAAC;EAChF,MAAMC,IAAI,GAAG,IAAIC,IAAI,CAAC,CAACP,OAAO,CAAC,EAAE;IAAEQ,IAAI,EAAE;EAAmB,CAAC,CAAC;EAE9Dd,MAAM,CAACY,IAAI,EAAEP,QAAQ,CAAC;EAEtBU,GAAG,CAACC,eAAe,CAACC,IAAI,CAACC,IAAI,CAAC;AAChC;AAIF,eAAeC,kBAAkBA,CAACf,YAAY,EAAEC,QAAQ,EAAE;EACtD,MAAMe,MAAM,GAAG,sBAAsB;EACrC,MAAMC,SAAS,GAAG,kEAAkE;EAEpF,MAAMC,GAAG,GAAG,gDAAgD;EAE5D,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACF,GAAG,EAAE;IAC9BG,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP,cAAc,EAAE,kBAAkB;MAClCC,cAAc,EAAEP,MAAM;MACtBQ,qBAAqB,EAAEP;IACzB,CAAC;IACDQ,IAAI,EAAEpB,IAAI,CAACC,SAAS,CAAC;MACnBoB,cAAc,EAAE;QACdC,IAAI,EAAE1B,QAAQ,CAAE;MAClB,CAAC;;MACD2B,aAAa,EAAE5B;IACjB,CAAC;EACH,CAAC,CAAC;EAEF,MAAM6B,MAAM,GAAG,MAAMV,QAAQ,CAACW,IAAI,CAAC,CAAC;EACpC,OAAOD,MAAM;AACf;AAIJ,eAAeE,SAASA,CAACC,OAAO,EAAE;EAChC,MAAMC,GAAG,GAAG,MAAMb,KAAK,CAAC3B,YAAY,CAAC;EACrC,MAAM;IAAEyC;EAAK,CAAC,GAAG,MAAMD,GAAG,CAACH,IAAI,CAAC,CAAC;EACjCE,OAAO,CAACE,IAAI,CAAC;AACf;AAEA,eAAeC,YAAYA,CAACD,IAAI,EAAE;EAChC,MAAMd,KAAK,CAAC3B,YAAY,EAAE;IACxB4B,MAAM,EAAE,KAAK;IACbC,OAAO,EAAE;MACP,cAAc,EAAE;IAClB,CAAC;IACDG,IAAI,EAAEpB,IAAI,CAACC,SAAS,CAAC;MAAE4B;IAAK,CAAC;EAC/B,CAAC,CAAC;AACJ;AAEA,MAAME,IAAI,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACjB,MAAM,CAACH,IAAI,EAAEF,OAAO,CAAC,GAAG1C,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAMgD,gBAAgB,GAAG9C,MAAM,CAAC,KAAK,CAAC;EAEtCD,SAAS,CAAC,MAAM;IACd,IAAI,CAAC+C,gBAAgB,CAACC,OAAO,EAAE;MAC7B;IACF;IACAJ,YAAY,CAACD,IAAI,CAAC,CACfM,IAAI,CAACN,IAAI,IAAII,gBAAgB,CAACC,OAAO,GAAG,KAAK,CAAC;EACnD,CAAC,EAAE,CAACL,IAAI,CAAC,CAAC;EAEV3C,SAAS,CAAC,MAAM;IACdwC,SAAS,CAACC,OAAO,CAAC;EACpB,CAAC,EAAE,EAAE,CAAC;EAGNzC,SAAS,CAAC,MAAM;IACd,IAAI2C,IAAI,CAACO,MAAM,GAAG,CAAC,EAAE;MACjB,MAAMzC,YAAY,GAAGkC,IAAI,CAAC/B,GAAG,CAACuC,IAAI,KAAK;QACnCf,IAAI,EAAEe,IAAI,CAACf,IAAI;QACfgB,WAAW,EAAED,IAAI,CAACC,WAAW;QAC7BC,KAAK,EAAEF,IAAI,CAACE,KAAK;QACjBC,UAAU,EAAE,CACV;UAAEC,UAAU,EAAE,QAAQ;UAAEC,KAAK,EAAEL,IAAI,CAACM;QAAO,CAAC,EAC5C;UAAEF,UAAU,EAAE,YAAY;UAAEC,KAAK,EAAEL,IAAI,CAACO;QAAI,CAAC,EAC7C;UAAEH,UAAU,EAAE,QAAQ;UAAEC,KAAK,EAAE;QAAW,CAAC,EAC3C;UAAED,UAAU,EAAE,SAAS;UAAEC,KAAK,EAAEL,IAAI,CAACQ;QAAQ,CAAC;MAElD,CAAC,CAAC,CAAC;;MAEH;MACJnD,YAAY,CAACC,YAAY,EAAE,WAAW,CAAC;;MAGvC;MACA,MAAMgD,MAAM,GAAGd,IAAI,CAAC,CAAC,CAAC,CAACc,MAAM,CAAC,CAAC;MAC/B,MAAM/C,QAAQ,GAAI,GAAE+C,MAAO,OAAM,CAAC,CAAC;;MAEnCjC,kBAAkB,CAACf,YAAY,EAAEC,QAAQ,CAAC,CACvCuC,IAAI,CAACX,MAAM,IAAI;QACdsB,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAEvB,MAAM,CAAC;QAC/C;MACF,CAAC,CAAC,CACDwB,KAAK,CAACC,KAAK,IAAI;QACdH,OAAO,CAACG,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;QACvD;MACF,CAAC,CAAC;IACN;EACF,CAAC,EAAE,CAACpB,IAAI,CAAC,CAAC;EAGV,oBACEpC,OAAA;IAAKyD,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAClB1D,OAAA,CAACJ,IAAI;MAAC+D,GAAG,EAAEzB,OAAQ;MAACM,gBAAgB,EAAEA;IAAiB;MAAAoB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAC1D/D,OAAA,CAACH,IAAI;MAACmE,QAAQ,EAAE5B,IAAK;MAAC6B,UAAU,EAAE/B,OAAQ;MAACM,gBAAgB,EAAEA;IAAiB;MAAAoB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC9E,CAAC;AAEV,CAAC;AAACxB,EAAA,CA1DID,IAAI;AAAA4B,EAAA,GAAJ5B,IAAI;AA4DV,eAAeA,IAAI;AAAC,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}